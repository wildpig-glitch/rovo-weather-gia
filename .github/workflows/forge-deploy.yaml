name: Forge Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select action to run'
        required: true
        default: 'deploy-dev'
        type: choice
        options:
          - 'test'
          - 'deploy-dev'
          - 'deploy-test'
          - 'deploy-production'
          - 'install-dev'
          - 'install-test'
          - 'install-production'
          - 'all'
      skip_tests:
        description: 'Skip running tests before deployment'
        required: false
        default: false
        type: boolean

jobs:
  # Pre-deployment checks
  pre-checks:
    runs-on: ubuntu-latest
    outputs:
      deploy-dev: ${{ steps.determine-envs.outputs.deploy-dev }}
      deploy-test: ${{ steps.determine-envs.outputs.deploy-test }}
      deploy-prod: ${{ steps.determine-envs.outputs.deploy-prod }}
      install-dev: ${{ steps.determine-envs.outputs.install-dev }}
      install-test: ${{ steps.determine-envs.outputs.install-test }}
      install-prod: ${{ steps.determine-envs.outputs.install-prod }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies
        run: npm install
        
      - name: Install Forge CLI
        run: npm install -g @forge/cli

      - name: Prepare Environment
        env:
          FORGE_EMAIL: ${{ secrets.FORGE_EMAIL }}
          FORGE_API_TOKEN: ${{ secrets.FORGE_API_TOKEN }}
        run: |
          echo "Preparing environment..."
          forge settings set usage-analytics true

      - name: Run tests
        if: ${{ !inputs.skip_tests }}
        env:
          FORGE_EMAIL: ${{ secrets.FORGE_EMAIL }}
          FORGE_API_TOKEN: ${{ secrets.FORGE_API_TOKEN }}
        run: |
          echo "Running tests..."
          # Add your test commands here
          # npm test
          forge lint
          echo "Tests passed"

      - name: Determine environments to deploy
        id: determine-envs
        run: |
          case "${{ inputs.environment }}" in
            "deploy-dev")
              echo "deploy-dev=true" >> $GITHUB_OUTPUT
              echo "deploy-test=false" >> $GITHUB_OUTPUT
              echo "deploy-prod=false" >> $GITHUB_OUTPUT
              echo "install-dev=false" >> $GITHUB_OUTPUT
              echo "install-test=false" >> $GITHUB_OUTPUT
              echo "install-prod=false" >> $GITHUB_OUTPUT
              ;;
            "deploy-test")
              echo "deploy-dev=false" >> $GITHUB_OUTPUT
              echo "deploy-test=true" >> $GITHUB_OUTPUT
              echo "deploy-prod=false" >> $GITHUB_OUTPUT
              echo "install-dev=false" >> $GITHUB_OUTPUT
              echo "install-test=false" >> $GITHUB_OUTPUT
              echo "install-prod=false" >> $GITHUB_OUTPUT
              ;;
            "deploy-production")
              echo "deploy-dev=false" >> $GITHUB_OUTPUT
              echo "deploy-test=false" >> $GITHUB_OUTPUT
              echo "deploy-prod=true" >> $GITHUB_OUTPUT
              echo "install-dev=false" >> $GITHUB_OUTPUT
              echo "install-test=false" >> $GITHUB_OUTPUT
              echo "install-prod=false" >> $GITHUB_OUTPUT
              ;;
            "install-dev")
              echo "deploy-dev=true" >> $GITHUB_OUTPUT
              echo "deploy-test=false" >> $GITHUB_OUTPUT
              echo "deploy-prod=false" >> $GITHUB_OUTPUT
              echo "install-dev=true" >> $GITHUB_OUTPUT
              echo "install-test=false" >> $GITHUB_OUTPUT
              echo "install-prod=false" >> $GITHUB_OUTPUT
              ;;
            "install-test")
              echo "deploy-dev=false" >> $GITHUB_OUTPUT
              echo "deploy-test=true" >> $GITHUB_OUTPUT
              echo "deploy-prod=false" >> $GITHUB_OUTPUT
              echo "install-dev=false" >> $GITHUB_OUTPUT
              echo "install-test=true" >> $GITHUB_OUTPUT
              echo "install-prod=false" >> $GITHUB_OUTPUT
              ;;
            "install-production")
              echo "deploy-dev=false" >> $GITHUB_OUTPUT
              echo "deploy-test=false" >> $GITHUB_OUTPUT
              echo "deploy-prod=true" >> $GITHUB_OUTPUT
              echo "install-dev=false" >> $GITHUB_OUTPUT
              echo "install-test=false" >> $GITHUB_OUTPUT
              echo "install-prod=true" >> $GITHUB_OUTPUT
              ;;              
            "all")
              echo "deploy-dev=true" >> $GITHUB_OUTPUT
              echo "deploy-test=true" >> $GITHUB_OUTPUT
              echo "deploy-prod=true" >> $GITHUB_OUTPUT
              echo "install-dev=true" >> $GITHUB_OUTPUT
              echo "install-test=true" >> $GITHUB_OUTPUT
              echo "install-prod=true" >> $GITHUB_OUTPUT
              ;;
          esac

  # Deploy to Development
  deploy-dev:
    needs: pre-checks
    if: needs.pre-checks.outputs.deploy-dev == 'true'
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Install Forge CLI
        run: npm install -g @forge/cli

      - name: Deploy to Development
        env:
          FORGE_EMAIL: ${{ secrets.FORGE_EMAIL }}
          FORGE_API_TOKEN: ${{ secrets.FORGE_API_TOKEN }}
        run: |
          echo "Deploying to Development environment..."
          forge deploy --environment development
          echo "Development deployment completed"

  # Deploy to Test
  deploy-test:
    needs: [pre-checks, deploy-dev]
    if: needs.pre-checks.outputs.deploy-test == 'true' && (success() || needs.deploy-dev.result == 'skipped')
    runs-on: ubuntu-latest
    environment: test
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Install Forge CLI
        run: npm install -g @forge/cli

      - name: Deploy to Test
        env:
          FORGE_EMAIL: ${{ secrets.FORGE_EMAIL }}
          FORGE_API_TOKEN: ${{ secrets.FORGE_API_TOKEN }}
        run: |
          echo "Deploying to Test environment..."
          forge deploy --environment test
          echo "Test deployment completed"

  # Deploy to Production
  deploy-production:
    needs: [pre-checks, deploy-test]
    if: needs.pre-checks.outputs.deploy-prod == 'true' && (success() || needs.deploy-test.result == 'skipped')
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Install Forge CLI
        run: npm install -g @forge/cli

      - name: Deploy to Production
        env:
          FORGE_EMAIL: ${{ secrets.FORGE_EMAIL }}
          FORGE_API_TOKEN: ${{ secrets.FORGE_API_TOKEN }}
        run: |
          echo "Deploying to Production environment..."
          if [ "${{ inputs.force_deploy }}" = "true" ]; then
            forge deploy --environment production
          else
            echo "Production deployment requires manual confirmation"
            forge deploy --environment production
          fi
          echo "Production deployment completed"

  # Post-deployment notifications
  notify:
    needs: [deploy-dev, deploy-test, deploy-production]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Send deployment notification
        run: |
          echo "Deployment Summary:"
          echo "Environment: ${{ inputs.environment }}"
          echo "Dev: ${{ needs.deploy-dev.result || 'skipped' }}"
          echo "Test: ${{ needs.deploy-test.result || 'skipped' }}"
          echo "Production: ${{ needs.deploy-production.result || 'skipped' }}"
          
          # Optional: Send to webhook, Slack, etc.
          # curl -X POST -H "Content-Type: application/json" \
          #   -d '{"text":"Deployment completed for ${{ inputs.environment }}"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}