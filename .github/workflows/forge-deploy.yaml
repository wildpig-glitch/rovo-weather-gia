name: Forge Deploy

on:
  push:
    branches: [ main, master, develop ]
  # Trigger on workflow dispatch with action input
  workflow_dispatch:
    inputs:
      action:
        description: 'Select action to run'
        required: true
        default: 'deploy-install-dev'
        type: choice
        options:
          - 'test'
          - 'deploy-dev'
          - 'deploy-test'
          - 'deploy-production'
          - 'deploy-install-dev'
          - 'deploy-install-test'
          - 'deploy-install-production'
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # Pre-deployment checks
  pre-checks:
    runs-on: ubuntu-latest
    outputs:
      test: ${{ steps.determine-envs.outputs.test }}
      deploy-dev: ${{ steps.determine-envs.outputs.deploy-dev }}
      deploy-test: ${{ steps.determine-envs.outputs.deploy-test }}
      deploy-prod: ${{ steps.determine-envs.outputs.deploy-prod }}
      deploy-install-dev: ${{ steps.determine-envs.outputs.deploy-install-dev }}
      deploy-install-test: ${{ steps.determine-envs.outputs.deploy-install-test }}
      deploy-install-prod: ${{ steps.determine-envs.outputs.deploy-install-prod }}
    steps:
      - name: Determine environments to deploy
        id: determine-envs
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ] || [ "${{ github.event_name }}" = "push" ]; then
            echo "This is a pull request or push event. Setting outputs to deploy and install on dev."
            echo "test=true" >> $GITHUB_OUTPUT
            echo "deploy-dev=true" >> $GITHUB_OUTPUT
            echo "deploy-test=false" >> $GITHUB_OUTPUT
            echo "deploy-prod=false" >> $GITHUB_OUTPUT
            echo "deploy-install-dev=true" >> $GITHUB_OUTPUT
            echo "deploy-install-test=false" >> $GITHUB_OUTPUT
            echo "deploy-install-prod=false" >> $GITHUB_OUTPUT
          else
            echo "This is not a pull request. Setting outputs based on action input."
            case "${{ inputs.action }}" in
            "test")
              echo "test=true" >> $GITHUB_OUTPUT
              echo "deploy-dev=false" >> $GITHUB_OUTPUT
              echo "deploy-test=false" >> $GITHUB_OUTPUT
              echo "deploy-prod=false" >> $GITHUB_OUTPUT
              echo "deploy-install-dev=false" >> $GITHUB_OUTPUT
              echo "deploy-install-test=false" >> $GITHUB_OUTPUT
              echo "deploy-install-prod=false" >> $GITHUB_OUTPUT
              ;;
            "deploy-dev")
              echo "test=true" >> $GITHUB_OUTPUT
              echo "deploy-dev=true" >> $GITHUB_OUTPUT
              echo "deploy-test=false" >> $GITHUB_OUTPUT
              echo "deploy-prod=false" >> $GITHUB_OUTPUT
              echo "deploy-install-dev=false" >> $GITHUB_OUTPUT
              echo "deploy-install-test=false" >> $GITHUB_OUTPUT
              echo "deploy-install-prod=false" >> $GITHUB_OUTPUT
              ;;
            "deploy-test")
              echo "test=true" >> $GITHUB_OUTPUT
              echo "deploy-dev=false" >> $GITHUB_OUTPUT
              echo "deploy-test=true" >> $GITHUB_OUTPUT
              echo "deploy-prod=false" >> $GITHUB_OUTPUT
              echo "deploy-install-dev=false" >> $GITHUB_OUTPUT
              echo "deploy-install-test=false" >> $GITHUB_OUTPUT
              echo "deploy-install-prod=false" >> $GITHUB_OUTPUT
              ;;
            "deploy-production")
              echo "test=true" >> $GITHUB_OUTPUT
              echo "deploy-dev=false" >> $GITHUB_OUTPUT
              echo "deploy-test=false" >> $GITHUB_OUTPUT
              echo "deploy-prod=true" >> $GITHUB_OUTPUT
              echo "deploy-install-dev=false" >> $GITHUB_OUTPUT
              echo "deploy-install-test=false" >> $GITHUB_OUTPUT
              echo "deploy-install-prod=false" >> $GITHUB_OUTPUT
              ;;
            "deploy-install-dev")
              echo "test=true" >> $GITHUB_OUTPUT
              echo "deploy-dev=true" >> $GITHUB_OUTPUT
              echo "deploy-test=false" >> $GITHUB_OUTPUT
              echo "deploy-prod=false" >> $GITHUB_OUTPUT
              echo "deploy-install-dev=true" >> $GITHUB_OUTPUT
              echo "deploy-install-test=false" >> $GITHUB_OUTPUT
              echo "deploy-install-prod=false" >> $GITHUB_OUTPUT
              ;;
            "deploy-install-test")
              echo "test=true" >> $GITHUB_OUTPUT
              echo "deploy-dev=false" >> $GITHUB_OUTPUT
              echo "deploy-test=true" >> $GITHUB_OUTPUT
              echo "deploy-prod=false" >> $GITHUB_OUTPUT
              echo "deploy-install-dev=false" >> $GITHUB_OUTPUT
              echo "deploy-install-test=true" >> $GITHUB_OUTPUT
              echo "deploy-install-prod=false" >> $GITHUB_OUTPUT
              ;;
            "deploy-install-production")
              echo "test=true" >> $GITHUB_OUTPUT
              echo "deploy-dev=false" >> $GITHUB_OUTPUT
              echo "deploy-test=false" >> $GITHUB_OUTPUT
              echo "deploy-prod=true" >> $GITHUB_OUTPUT
              echo "deploy-install-dev=false" >> $GITHUB_OUTPUT
              echo "deploy-install-test=false" >> $GITHUB_OUTPUT
              echo "deploy-install-prod=true" >> $GITHUB_OUTPUT
              ;;
            esac
          fi
          

  # Tests
  test:
    needs: pre-checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run tests
        run: |
          echo "Running tests..."
          # Add your test commands here
          echo "Tests passed"
  
  # Deploy to Development
  deploy-dev:
    needs: [pre-checks, test]
    if: needs.pre-checks.outputs.deploy-dev == 'true'
    runs-on: ubuntu-latest
    #environment: development
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies
        run: npm install

      - name: Install Forge CLI
        run: npm install -g @forge/cli

      - name: Deploy to Development
        env:
          FORGE_EMAIL: ${{ secrets.FORGE_EMAIL }}
          FORGE_API_TOKEN: ${{ secrets.FORGE_API_TOKEN }}
        run: |
          echo "Deploying to Development environment..."
          forge settings set usage-analytics true
          forge deploy --environment development
          echo "Development deployment completed"

  # Deploy to Test
  deploy-test:
    needs: [pre-checks, test]
    if: needs.pre-checks.outputs.deploy-test == 'true'
    runs-on: ubuntu-latest
    #environment: test
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Install Forge CLI
        run: npm install -g @forge/cli

      - name: Deploy to Test
        env:
          FORGE_EMAIL: ${{ secrets.FORGE_EMAIL }}
          FORGE_API_TOKEN: ${{ secrets.FORGE_API_TOKEN }}
        run: |
          echo "Deploying to Test environment..."
          forge settings set usage-analytics true
          forge deploy --environment test
          echo "Test deployment completed"

  # Deploy to Production
  deploy-production:
    needs: [pre-checks, test]
    if: needs.pre-checks.outputs.deploy-prod == 'true'
    runs-on: ubuntu-latest
    #environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Install Forge CLI
        run: npm install -g @forge/cli

      - name: Deploy to Production
        env:
          FORGE_EMAIL: ${{ secrets.FORGE_EMAIL }}
          FORGE_API_TOKEN: ${{ secrets.FORGE_API_TOKEN }}
        run: |
          echo "Deploying to Production environment..."
          forge settings set usage-analytics true
          if [ "${{ inputs.force_deploy }}" = "true" ]; then
            forge deploy --environment production
          else
            echo "Production deployment requires manual confirmation"
            forge deploy --environment production
          fi
          echo "Production deployment completed"
  
  # Install to Development
  deploy-install-dev:
    needs: deploy-dev
    if: needs.pre-checks.outputs.deploy-install-dev == 'true' && (success()) 
    runs-on: ubuntu-latest
    #environment: dev
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Install Forge CLI
        run: npm install -g @forge/cli

      - name: Install to Development
        env:
          FORGE_EMAIL: ${{ secrets.FORGE_EMAIL }}
          FORGE_API_TOKEN: ${{ secrets.FORGE_API_TOKEN }}
          SITE: ${{ vars.SITE }}
          PRODUCT: ${{ vars.PRODUCT }}
          TARGET_ENV: development 
        run: |
          echo "Checking environment variables..."
          if [ -z "$SITE" ] || [ -z "$PRODUCT" ]; then
            echo "SITE and PRODUCT environment variables must be set"
            exit 1
          fi

          forge settings set usage-analytics true
          install_output=$(forge install list 2>&1)
          echo "Installation status:"
          echo "$install_output"
          echo "---"

          # Check if app is not installed
          if echo "$install_output" | grep -q "The app is not installed anywhere"; then
            echo "App is not installed. Running fresh installation..."
            forge install --environment development --site $SITE --product $PRODUCT --non-interactive
          elif echo "$install_output" | grep -E "│\s+[a-f0-9-]+\s+│\s+$TARGET_ENV\s+│" > /dev/null; then
            echo "App is already installed in $TARGET_ENV environment. Running upgrade..."
            forge install --environment $TARGET_ENV --site $SITE --product $PRODUCT --non-interactive --upgrade
          elif echo "$install_output" | grep -q "Installation ID"; then
            echo "App is installed in other environments but not in $TARGET_ENV. Running fresh installation..."
            forge install --environment $TARGET_ENV --site $SITE --product $PRODUCT --non-interactive
          else
            echo "⚠ Unexpected installation status. Output was:"
            echo "$install_output"
          fi
          echo "Development installation completed"
      - name: Read Lint Output and Post to Webhook
        if: always()
        run: |
          output=$(cat forge_lint_output.txt)
          STATUS="${{ job.status }}"
          BRANCH="${{ github.head_ref }}"
          WEBHOOK_URL="https://webhook.site/5a666d75-93ee-4297-bc4c-b85c7d54976f"
          echo "DEBUG: Captured output size: $(echo "$output" | wc -c) characters"
          echo "DEBUG: Branch: $BRANCH"
          echo "DEBUG: Status: $STATUS"
          payload=$(jq -n \
            --arg branch "$BRANCH" \
            --arg status "$STATUS" \
            --arg output "$output" \
            '{branch: $branch, status: $status, output: $output}')
          echo "DEBUG: Payload size: $(echo "$payload" | wc -c) characters"
          echo "DEBUG: JSON validation: $(echo "$payload" | jq . >/dev/null 2>&1 && echo "Valid" || echo "Invalid")"
          response=$(curl -s -w "HTTP_CODE:%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -d "$payload" \
            "$WEBHOOK_URL")
          echo "Webhook response: $response"

  # Install to Test
  deploy-install-test:
    needs: deploy-test
    if: needs.pre-checks.outputs.deploy-install-test == 'true' && (success())
    runs-on: ubuntu-latest
    #environment: test
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Install Forge CLI
        run: npm install -g @forge/cli

      - name: Install to Test
        env:
          FORGE_EMAIL: ${{ secrets.FORGE_EMAIL }}
          FORGE_API_TOKEN: ${{ secrets.FORGE_API_TOKEN }}
          SITE: ${{ vars.SITE }}
          PRODUCT: ${{ vars.PRODUCT }}
          TARGET_ENV: test 
        run: |
          echo "Checking environment variables..."
          if [ -z "$SITE" ] || [ -z "$PRODUCT" ]; then
            echo "SITE and PRODUCT environment variables must be set"
            exit 1
          fi

          forge settings set usage-analytics true
          install_output=$(forge install list 2>&1)
          echo "Installation status:"
          echo "$install_output"
          echo "---"

          # Check if app is not installed
          if echo "$install_output" | grep -q "The app is not installed anywhere"; then
            echo "App is not installed. Running fresh installation..."
            forge install --environment development --site $SITE --product $PRODUCT --non-interactive
          elif echo "$install_output" | grep -E "│\s+[a-f0-9-]+\s+│\s+$TARGET_ENV\s+│" > /dev/null; then
            echo "App is already installed in $TARGET_ENV environment. Running upgrade..."
            forge install --environment $TARGET_ENV --site $SITE --product $PRODUCT --non-interactive --upgrade
          elif echo "$install_output" | grep -q "Installation ID"; then
            echo "App is installed in other environments but not in $TARGET_ENV. Running fresh installation..."
            forge install --environment $TARGET_ENV --site $SITE --product $PRODUCT --non-interactive
          else
            echo "⚠ Unexpected installation status. Output was:"
            echo "$install_output"
          fi

          echo "Test installation completed"

  # Install to Production
  deploy-install-production:
    needs: deploy-production
    if: needs.pre-checks.outputs.deploy-install-prod == 'true' && (success())
    runs-on: ubuntu-latest
    #environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Install Forge CLI
        run: npm install -g @forge/cli

      - name: Install to Production
        env:
          FORGE_EMAIL: ${{ secrets.FORGE_EMAIL }}
          FORGE_API_TOKEN: ${{ secrets.FORGE_API_TOKEN }}
          SITE: ${{ vars.SITE }}
          PRODUCT: ${{ vars.PRODUCT }}
          TARGET_ENV: production 
        run: |
          echo "Checking environment variables..."
          if [ -z "$SITE" ] || [ -z "$PRODUCT" ]; then
            echo "SITE and PRODUCT environment variables must be set"
            exit 1
          fi

          forge settings set usage-analytics true
          install_output=$(forge install list 2>&1)
          echo "Installation status:"
          echo "$install_output"
          echo "---"

          # Check if app is not installed
          if echo "$install_output" | grep -q "The app is not installed anywhere"; then
            echo "App is not installed. Running fresh installation..."
            forge install --environment development --site $SITE --product $PRODUCT --non-interactive
          elif echo "$install_output" | grep -E "│\s+[a-f0-9-]+\s+│\s+$TARGET_ENV\s+│" > /dev/null; then
            echo "App is already installed in $TARGET_ENV environment. Running upgrade..."
            forge install --environment $TARGET_ENV --site $SITE --product $PRODUCT --non-interactive --upgrade
          elif echo "$install_output" | grep -q "Installation ID"; then
            echo "App is installed in other environments but not in $TARGET_ENV. Running fresh installation..."
            forge install --environment $TARGET_ENV --site $SITE --product $PRODUCT --non-interactive
          else
            echo "⚠ Unexpected installation status. Output was:"
            echo "$install_output"
          fi

          echo "Production installation completed"