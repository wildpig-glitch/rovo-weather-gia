name: Forge Lint on PR

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Forge CLI
        run: npm install -g @forge/cli

      - name: Configure Forge CLI for CI
        env:
          FORGE_EMAIL: ${{ secrets.FORGE_EMAIL }}
          FORGE_API_TOKEN: ${{ secrets.FORGE_API_TOKEN }}
        run: |
          # Set CI environment variables
          export CI=true
          export FORGE_NO_PROMPT=true
          
          # Authenticate with Forge using API token
          if [ -n "$FORGE_EMAIL" ] && [ -n "$FORGE_API_TOKEN" ]; then
            echo "Authenticating with Forge using API token..."
            forge login --email "$FORGE_EMAIL" --token "$FORGE_API_TOKEN"
          else
            echo "WARNING: FORGE_EMAIL and FORGE_API_TOKEN secrets not set"
            echo "Please add these secrets to your repository settings"
            echo "See: https://go.atlassian.com/dac/platform/forge/getting-started/#log-in-with-an-atlassian-api-token"
          fi
          
          # Disable analytics prompts for CI environment
          forge settings set usage-analytics false || true
          # Set other CI-friendly settings  
          forge settings set check-update false || true
          # Show current settings
          echo "Forge CLI settings:"
          forge settings list || true

      - name: Forge Lint
        id: forge_lint
        env:
          CI: true
          FORGE_NO_PROMPT: true
        run: |
          # Multiple approaches to ensure lint runs in non-interactive mode
          echo "Attempting forge lint with multiple fallback methods..."
          
          # Method 1: Direct with environment variables
          if forge lint --verbose > forge_lint_output.txt 2>&1; then
            echo "Method 1 (direct) succeeded"
          else
            echo "Method 1 failed, trying Method 2..."
            # Method 2: With input redirection
            if forge lint --verbose < /dev/null > forge_lint_output.txt 2>&1; then
              echo "Method 2 (input redirect) succeeded"
            else
              echo "Method 2 failed, trying Method 3..."
              # Method 3: With timeout and echo
              echo "" | timeout 60 forge lint --verbose > forge_lint_output.txt 2>&1 || true
              echo "Method 3 (timeout + echo) completed"
            fi
          fi
          
          echo "Final output size: $(cat forge_lint_output.txt | wc -c) characters"

      - name: Read Lint Output and Post to Webhook
        if: always()
        run: |
          # Read the lint output
          output=$(cat forge_lint_output.txt)
          STATUS="${{ job.status }}"
          BRANCH="${{ github.head_ref }}"
          WEBHOOK_URL="https://webhook.site/5a666d75-93ee-4297-bc4c-b85c7d54976f"
          
          echo "DEBUG: Captured output size: $(echo "$output" | wc -c) characters"
          echo "DEBUG: Branch: $BRANCH"
          echo "DEBUG: Status: $STATUS"
          echo "DEBUG: Output preview (first 200 chars):"
          echo "$output" | head -c 200
          echo "..."
          
          # Create properly escaped JSON payload using jq
          payload=$(jq -n \
            --arg branch "$BRANCH" \
            --arg status "$STATUS" \
            --arg output "$output" \
            '{branch: $branch, status: $status, output: $output}')
          
          echo "DEBUG: Payload size: $(echo "$payload" | wc -c) characters"
          echo "DEBUG: JSON validation: $(echo "$payload" | jq . >/dev/null 2>&1 && echo "Valid" || echo "Invalid")"
          
          # Send to webhook
          response=$(curl -s -w "HTTP_CODE:%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -d "$payload" \
            "$WEBHOOK_URL")
          
          echo "Webhook response: $response"